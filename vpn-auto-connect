#!/usr/bin/env python3

"""
Autor: Rafael Costa Biasi [https://github.com/rafaelbiasi]
Versão: 1.0.8
"""

import os
import subprocess
import argparse
import json
import time
import base64
import getpass
from cryptography.fernet import Fernet
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# Obtém o diretório onde o script está localizado
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(SCRIPT_DIR, 'vpn-config.json')
KEY_FILE = os.path.join(SCRIPT_DIR, 'secret.key')

def generate_key():
    key = Fernet.generate_key()
    with open(KEY_FILE, 'wb') as key_file:
        key_file.write(key)
    return key

def load_key():
    if os.path.exists(KEY_FILE):
        return open(KEY_FILE, 'rb').read()
    else:
        return generate_key()

def encrypt_password(password, key):
    f = Fernet(key)
    return f.encrypt(password.encode())

def decrypt_password(encrypted_password, key):
    f = Fernet(key)
    return f.decrypt(encrypted_password).decode()

def load_config():
    print('Carregando configuração.')
    with open(CONFIG_FILE, 'r') as f:
        return json.load(f)

def save_config(config):
    print('Salvando configuração.')
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)

def install_packages():
    print('Instalando dependências.')
    subprocess.run(['sudo', 'apt', 'update'], check=True)
    subprocess.run(['sudo', 'apt', 'install', '-y', 'openconnect', 'openssl'], check=True)
    subprocess.run(['pip3', 'install', 'selenium', 'webdriver_manager', 'cryptography'], check=True)
    subprocess.run(['sudo', 'pip3', 'install', 'vpn-slice[dnspython,setproctitle]'], check=True)

def configure_driver(args):
    print('Configurando web driver.')
    chrome_options = webdriver.ChromeOptions()
    if not args.manual and not args.browser:
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=720,540')
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument('--ignore-ssl-errors')
    return webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)

def wait_for_page_load(driver, timeout=30):
    print('Esperando página carregar.')
    WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script('return document.readyState') == 'complete'
    )
    time.sleep(1)

def automate_login(driver, host, username, password):
    print('Login automático.')
    driver.get(host)
    wait_for_page_load(driver)

    email_field = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.NAME, "loginfmt"))
    )
    email_field.send_keys(username)

    next_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "idSIButton9"))
    )
    next_button.click()
    wait_for_page_load(driver)

    password_field = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.NAME, "passwd"))
    )
    password_field.send_keys(password)

    sign_in_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "idSIButton9"))
    )
    sign_in_button.click()
    wait_for_page_load(driver)

    dont_show_checkbox = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "KmsiCheckboxField"))
    )
    dont_show_checkbox.click()

    yes_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "idSIButton9"))
    )
    yes_button.click()
    wait_for_page_load(driver)

    cookie = driver.get_cookie("SVPNCOOKIE")['value']
    driver.quit()
    return cookie

def manual_login(driver, host):
    print('Login manual.')
    driver.get(host)
    print("Por favor, faça o login manualmente...")
    while not driver.get_cookie("SVPNCOOKIE"):
        time.sleep(1)
    cookie = driver.get_cookie("SVPNCOOKIE")['value']
    driver.quit()
    return cookie

def connect_vpn(cookie, host, lan_enabled, server_cert, vpn_slice):
    print('Conectando na vpn.')
    command = ['sudo', 'openconnect', '--protocol=fortinet', host, '--servercert', server_cert, f'--cookie=SVPNCOOKIE={cookie}']
    if lan_enabled:
        command.extend(['-s', f'vpn-slice {vpn_slice}'])
    subprocess.run(command, check=True)

def keep_sudo_alive():
    print('Mantendo o sudo vivo.')
    while True:
        subprocess.run(['sudo', '-v'])
        time.sleep(60)

def check_for_updates():
    print('Verificando atualizações.')
    result = subprocess.run(['git', 'fetch'], capture_output=True, text=True, cwd=SCRIPT_DIR)
    if result.returncode != 0:
        raise Exception("Erro ao verificar atualizações.")
    result = subprocess.run(['git', 'status'], capture_output=True, text=True, cwd=SCRIPT_DIR)
    if 'Your branch is up to date' in result.stdout:
        print('Nenhuma atualização disponível.')
        return False
    else:
        print('Atualizações disponíveis.')
        return True

def upgrade_script():
    print('Atualizando script.')
    result = subprocess.run(['git', 'pull'], capture_output=True, text=True, cwd=SCRIPT_DIR)
    if result.returncode != 0:
        raise Exception("Erro ao atualizar script.")
    print('Script atualizado com sucesso.')

def parse_arguments():
    print('Configurando argumentos.')
    parser = argparse.ArgumentParser(description="Script unificado para conexão VPN.")
    parser.add_argument('--install', action='store_true', help='Instala os pacotes necessários.')
    parser.add_argument('--off', action='store_true', help='Conecta ao VPN com LAN desabilitada.')
    parser.add_argument('--manual', action='store_true', help='Usa a execução manual do script de login. Implica --browser automaticamente')
    parser.add_argument('--browser', action='store_true', help='Mostra a execução do login SSO no navegador.')
    parser.add_argument('--host', type=int, choices=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], default=1, help='Define o host VPN para a conexão.')
    parser.add_argument('--setup', action='store_true', help='Configura o arquivo vpn-config.json.')
    parser.add_argument('--plain', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--update', action='store_true', help='Verifica se há atualização do script.')
    parser.add_argument('--upgrade', action='store_true', help='Atualiza o script.')
    return parser.parse_args()

def setup_config():
    config = load_config()
    for key, value in config.items():
        if key == 'encrypted-password' or key == 'password':
            continue
        change = input(f'Deseja mudar a configuração de "{key}" (atual: {value})? (y/N): ').strip().lower()
        if change == 'y':
            new_value = input(f'Insira o novo valor para "{key}": ').strip()
            config[key] = new_value

    save_config(config)

    change_password = input('Deseja mudar a senha criptografada? (y/N): ').strip().lower()
    if change_password == 'y':
        sudo_password = getpass.getpass("Digite a senha do sudo: ")
        plain_password = getpass.getpass("Digite a nova senha que deseja criptografar: ")
        key = load_key()
        encrypted_password = encrypt_password(plain_password, key)
        config['encrypted-password'] = encrypted_password.decode()
        save_config(config)
        print("Nova senha criptografada salva no arquivo de configuração.")

def main():
    print('Iniciando vpn.')
    args = parse_arguments()
    config = load_config()
    key = load_key()

    if args.install:
        install_packages()
        return

    if args.setup:
        setup_config()
        return

    if args.update:
        if check_for_updates():
            print("Há atualizações disponíveis. Use o parâmetro --upgrade para atualizar o script.")
        else:
            print("O script está atualizado.")
        return

    if args.upgrade:
        upgrade_script()
        return

    if args.plain:
        print("Aviso: Usar a senha em texto claro não é recomendável. Depreciado. Marcado para remoção.")
        password = config['password']
        command = ['sudo', '-v']
        subprocess.run(command, check=True)
    else:
        sudo_password = getpass.getpass("Digite a senha do sudo: ")
        password = decrypt_password(config['encrypted-password'].encode(), key)
        command = ['echo', '-n', sudo_password, '|', 'sudo', '-S', 'true', '2>/dev/null']
        subprocess.run(command, shell=True, capture_output=False, text=True)

    host = config['host_mapping'][str(args.host)]
    username = config['username']
    server_cert = config['server_cert']
    vpn_slice = config['vpn_slice']
    lan_enabled = not args.off

    # Verificar atualizações no início da execução do script
    if check_for_updates():
        print("Há atualizações disponíveis. Por favor, atualize o script para a versão mais recente.")
        input("Pressione Enter para continuar...")

    driver = configure_driver(args)
    hostHttps = f"https://{host}/"

    print('Host selecionado: ' + host)

    if args.manual:
        cookie = manual_login(driver, hostHttps)
    else:
        cookie = automate_login(driver, hostHttps, username, password)

    connect_vpn(cookie, host, lan_enabled, server_cert, vpn_slice)
    keep_sudo_alive()

if __name__ == "__main__":
    main()

"""
PsCJWAkA8S4



     ▄▄▄▄▄▄▄  ▄    ▄    ▄  ▄▄▄▄▄▄▄
     █ ▄▄▄ █ ▀█▄█▀▄▀█▄█▄▄▄ █ ▄▄▄ █
     █ ███ █ ▀▀▄▀▄▀ ▀▀▀ ▄▄ █ ███ █
     █▄▄▄▄▄█ █ █ ▄ █▀█▀▄▀▄ █▄▄▄▄▄█
     ▄▄▄▄▄ ▄▄▄▄▄ █▄█▄▀▀▀▀▄▄ ▄ ▄ ▄ 
      █▀█▀▀▄█▄█ ▄▄ ██▄▄▄ ▀▄▀█▀█▄▀ 
     █▄▄▄  ▄▀ █▀█   ███▀▀▀▀██▀▀  ▀
     ▀▄ █▄▀▄██▀▀ ▀▄█▀█▄ ▀ ▀▀█▀█▄█▄
     ▀▀ ▄  ▄▄ ▀▀ ██ ▄ ▄ ▀█▄██▀  ▀▀
     █▀█ ▀▀▄▀▀▀█▄▄ █▄█▄  █  █▀█▄▄█
     █ █▀▄▀▄ ▄▀▄█▄  ▄█ █▀█████▄▄█▀
     ▄▄▄▄▄▄▄ ██▄ █▄▀ █▄  █ ▄ █▄▄▀ 
     █ ▄▄▄ █ ▄█▄ █▀▀▄   ▀█▄▄▄█ ███
     █ ███ █ █▄▀   ▄▀ ▄▀█▀ ██  ▄▄ 
     █▄▄▄▄▄█ █▄▄▀▀▄▀▄█▄██  ▄ ▄██ ▀



"""
